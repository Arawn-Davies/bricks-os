#ifndef VECTOR_H
#define VECTOR_H


namespace std
{

  
  template <class T>
  class vector
  {
  public:
    // FIXME: Should be dynamic, but we don't have memory management
    #define MAX_VECTOR_SIZE 10

    typedef T value_type;
    typedef T * pointer;
    typedef T & reference;
    typedef const T & const_reference;
    typedef unsigned int size_type;

  public:
    vector() : iUsed_(0){}
    virtual ~vector(){}

    size_type size() const {return iUsed_;}
    size_type max_size() const {return MAX_VECTOR_SIZE;}
    size_type capacity() const {return MAX_VECTOR_SIZE;}
    bool empty() const {return (iUsed_ == 0);}

    // FIXME: Should throw error, but we don't have exceptions
    reference operator[](size_type n){if(n < iUsed_) return vec_[n]; else return vec_[0];}
    const_reference operator[](size_type n) const {if(n < iUsed_) return vec_[n]; else return vec_[0];}

    reference front() {return vec_[0];}
    const_reference front() const {return vec_[0];}

    reference back() {return vec_[iUsed_ - 1];}
    const_reference back() const {return vec_[iUsed_ - 1];}

    void push_back(const_reference t){if(iUsed_ < MAX_VECTOR_SIZE){vec_[iUsed_] = t; iUsed_++;}}
    void pop_back() {if(iUsed_ > 0)iUsed_--;}

    void clear() {iUsed_ = 0;}

  private:
    value_type vec_[MAX_VECTOR_SIZE];
    size_type  iUsed_;
  };


};


#endif
