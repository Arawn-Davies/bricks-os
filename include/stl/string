/*
 * Bricks-OS, Operating System for Game Consoles
 * Copyright (C) 2008 Maximus32 <Maximus32@bricks-os.org>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
 * 02111-1307 USA
 */


#ifndef STL_STRING
#define STL_STRING


#include "string.h"
#include "ostream"


namespace std
{

  class string
  {
  public:
    // FIXME: Should be dynamic but we don't have memory management
    #define STRING_SIZE 80

    typedef char value_type;
    typedef char * pointer;
    typedef char & reference;
    typedef const char & const_reference;
    typedef unsigned int size_type;

  public:
    string() : iLength_(0){string_[0] = 0;}
    string(const char * string);

    size_type size() const {return strlen(string_);}
    size_type length() const {return strlen(string_);}
    size_type max_size() const {return STRING_SIZE;}
    size_type capacity() const {return STRING_SIZE;}
    bool empty() const {return (iLength_ == 0);}

    // FIXME: Should throw error, but we don't have exceptions
    reference operator[](size_type n){if(n < iLength_) return string_[n]; else return string_[0];}
    const_reference operator[](size_type n) const {if(n < iLength_) return string_[n]; else return string_[0];}

    const char * c_str() const {return string_;}
    void clear() {string_[0] = 0; iLength_ = 0;}

    bool operator==(const string & s) const {return (strcmp(string_, s.string_) == 0);}
    bool operator==(const char   * s) const {return (strcmp(string_, s) == 0);}

  private:
    char string_[STRING_SIZE];
    size_type iLength_;
  };

  ostream & operator<<(ostream & os, const string & s);

}


#endif
